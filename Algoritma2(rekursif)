#include <stdio.h>
#include <time.h>

void findIntersection(int A[], int B[], int irisan[], int index_A, int index_B, int i, int j, int *index_irisan) {
    if (i == index_A) {
        return;
    } else if (j == index_B) {
        findIntersection(A, B, irisan, index_A, index_B, i + 1, 0, index_irisan);
    } else {
        if (A[i] == B[j]) {
            irisan[(*index_irisan)++] = A[i];
        }
        findIntersection(A, B, irisan, index_A, index_B, i, j + 1, index_irisan);
    }
}

int main() {
    clock_t start_time, end_time;
    
    int max_elemen = 100;

    // Inisialisasi array untuk menyimpan himpunan A dan B
    int A[max_elemen], B[max_elemen], irisan[max_elemen];

    // Input himpunan A dari user
    printf("Masukkan elemen-elemen himpunan A (pisahkan dengan spasi, akhiri dengan -1): ");
    int elemen, index_A = 0;
    for (index_A = 0; ; index_A++) {
        scanf("%d", &elemen);
        if (elemen == -1) {
            break;
        }
        A[index_A] = elemen;
    }
    
    // Input himpunan B dari user
    printf("Masukkan elemen-elemen himpunan B (pisahkan dengan spasi, akhiri dengan -1): ");
    int index_B = 0;
    for (index_B = 0; ; index_B++) {
        scanf("%d", &elemen);
        if (elemen == -1) {
            break;
        }
        B[index_B] = elemen;
    }
    
    int index_irisan = 0;
    
    start_time = clock();
    findIntersection(A, B, irisan, index_A, index_B, 0, 0, &index_irisan);
    end_time = clock();

    double execution_time = ((double) (end_time - start_time)) / CLOCKS_PER_SEC;
    printf("Execution time: %f seconds\n", execution_time);
    
    printf("Irisan dari himpunan A dan B adalah: ");
    for (int i = 0; i < index_irisan; i++) {
        printf("%d ", irisan[i]);
    }

    return 0;
}

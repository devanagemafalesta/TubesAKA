#include <stdio.h>
#include <time.h>

// Recursive function to find intersection
void findIntersection(int A[], int B[], int irisan[], int index_A, int index_B, int i, int j, int index_irisan) {
    if (i == index_A) {
        return;
    } else if (j == index_B) {
        findIntersection(A, B, irisan, index_A, index_B, i + 1, 0, index_irisan);
    } else {
        if (A[i] == B[j]) {
            irisan[(index_irisan)++] = A[i];
        }
        findIntersection(A, B, irisan, index_A, index_B, i, j + 1, index_irisan);
    }
}

int main() {
    // Maximum number of elements in the set
    int max_elemen = 100;

    // Initialize arrays to store sets A and B
    int A[max_elemen], B[max_elemen], irisan[max_elemen];

    // Input set A from user
    printf("Enter the elements of set A (separate with space, end with -1): ");
    int elemen, index_A = 0;
    for (index_A = 0;; index_A++) {
        scanf("%d", &elemen);
        if (elemen == -1) {
            break;
        }
        A[index_A] = elemen;
    }

    // Input set B from user
    printf("Enter the elements of set B (separate with space, end with -1): ");
    int index_B = 0;
    for (index_B = 0;; index_B++) {
        scanf("%d", &elemen);
        if (elemen == -1) {
            break;
        }
        B[index_B] = elemen;
    }

    // Initialize index for intersection
    int index_irisan = 0;

    // Measure the start time
    clock_t start = clock();

    // Call recursive function to find intersection
    findIntersection(A, B, irisan, index_A, index_B, 0, 0, &index_irisan);

    // Measure the end time
    clock_t end = clock();

    // Display the result
    printf("The intersection of sets A and B is: ");
    for (int i = 0; i < index_irisan; i++) {
        printf("%d ", irisan[i]);
    }

    // Calculate and display the time taken
    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("\nTime taken: %.7f seconds\n", time_taken);

    return 0;
}
